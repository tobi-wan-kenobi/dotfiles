#!/usr/bin/env python

import re
import os
import imp
import shutil
import logging
import argparse

exclude = [
    "dotify", "\.git.*", "LICENSE", "README.md", "TODO", ".*swp$", "backup", "doc", ".*swo$", "libdotify"
]

def ignore(f):
    for pattern in exclude:
        if re.match(pattern, f):
            return True
    return False

def update(args, src, dst):
    if os.path.exists(dst) and not os.path.islink(dst):
        if args.backup:
            directory = os.path.abspath(os.path.expanduser(args.backup_directory))
            logging.info("backing up {} into {}".format(dst, directory))
            shutil.move(dst, directory)
        elif args.force:
            logging.info("removing {}".format(dst))
            shutil.rmtree(dst)

    if os.path.islink(dst):
        logging.debug("recreating symlink {}".format(dst))
        os.unlink(dst)
        os.symlink(src, dst)
    elif not os.path.exists(dst):
        logging.debug("creating symlink {}".format(dst))
        os.symlink(src, dst)
    else:
        logging.warn("{} exists and is not a symlink, skipping".format(dst))

    if os.path.exists("{}/{}".format(dst, "dotify")):
        mod = imp.load_source("dotify_module", "{}/{}".format(dst, "dotify"))
        update = getattr(mod, "update")
        update(args, dst)

def main(args):
    for f in os.listdir("."):
        if ignore(f):
            continue

        dst = os.path.expanduser("~/{}".format(f))
        src = os.path.abspath(f)

        update(args, src, dst)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(levelname)-8s %(message)s"
    )
    parser = argparse.ArgumentParser(description="install or update dotfile")
    parser.add_argument("-f", "--force", action="store_true",
        help="remove files, if they exist.")
    parser.add_argument("-b", "--backup", action="store_true",
        help="use together with --force to backup any files that would be removed.")
    parser.add_argument("--backup-directory", default="./backup/",
        help="directory into which data will be backed up, if -b is used.")

    args = parser.parse_args()

    main(args)

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
